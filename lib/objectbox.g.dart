// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/my_posts/data/models/my_post_entity.dart';
import 'features/home/data/model/post_entity.dart';
import 'features/home/data/model/todo_entity.dart';
import 'features/home/data/model/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 9116086646124119349),
      name: 'PostEntity',
      lastPropertyId: const obx_int.IdUid(13, 79309412489305104),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2170747973061486693),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5476844452928928391),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1032698523827589894),
            name: 'body',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2290193841736332301),
            name: 'userId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 709856801898715499),
            name: 'tags',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8808760978789474809),
            name: 'likes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2093863650588756217),
            name: 'dislikes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3467286005732861792),
            name: 'views',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8945691039975599287),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3458444383266031896),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 180778921493492776),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 943946550640602306),
            name: 'isDeleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 79309412489305104),
            name: 'apiId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7040116451845359133),
      name: 'TodoEntity',
      lastPropertyId: const obx_int.IdUid(8, 1819174994301281181),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5684077919598866618),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9052715223777082157),
            name: 'todo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 12519361450347109),
            name: 'completed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2833094560470304745),
            name: 'userId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 145747955210436802),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3465923718194944573),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6568496261500895422),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1819174994301281181),
            name: 'isDeleted',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 7472362351845363814),
      name: 'UserEntity',
      lastPropertyId: const obx_int.IdUid(24, 2628802703812635962),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1159075620889460016),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6655137040040444757),
            name: 'apiId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1879823851366795788),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1766194143960014192),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5740249175984322827),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7155296004684610038),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5234317420485990524),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7028220068245670517),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2114537265410055520),
            name: 'gender',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6552879911657839209),
            name: 'birthDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5092986727246586129),
            name: 'addressStreet',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6744515397374018511),
            name: 'addressCity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 224046696213902714),
            name: 'addressState',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4621521869772294343),
            name: 'addressStateCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 56398452258400314),
            name: 'addressPostalCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7762191897458757971),
            name: 'addressCountry',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 4651251670472082276),
            name: 'companyName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 559090054201602662),
            name: 'companyDepartment',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3039556029105139686),
            name: 'companyTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3161392560085434947),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2499102737781203701),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 7495258009567133461),
            name: 'isSynced',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 3870399465252092488),
            name: 'isDeleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 2628802703812635962),
            name: 'isInitialBatch',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4586733709556252618),
      name: 'MyPostEntity',
      lastPropertyId: const obx_int.IdUid(12, 7895555111502775552),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1755298154410698270),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4007487267725798732),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1932236008857174481),
            name: 'body',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 744025191733377967),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5846705823404573509),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2189476927099601510),
            name: 'isDeleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7712126095370485645),
            name: 'authorName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7104613199907388295),
            name: 'tags',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1373776482877810848),
            name: 'likes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 4131490419719675288),
            name: 'dislikes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7895555111502775552),
            name: 'views',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 4586733709556252618),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8450745484977064916],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    PostEntity: obx_int.EntityDefinition<PostEntity>(
        model: _entities[0],
        toOneRelations: (PostEntity object) => [],
        toManyRelations: (PostEntity object) => {},
        getId: (PostEntity object) => object.id,
        setId: (PostEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PostEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final bodyOffset = fbb.writeString(object.body);
          final tagsOffset = fbb.writeString(object.tags);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, bodyOffset);
          fbb.addInt64(3, object.userId);
          fbb.addOffset(4, tagsOffset);
          fbb.addInt64(5, object.likes);
          fbb.addInt64(6, object.dislikes);
          fbb.addInt64(7, object.views);
          fbb.addInt64(8, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(9, object.updatedAt.millisecondsSinceEpoch);
          fbb.addBool(10, object.isSynced);
          fbb.addBool(11, object.isDeleted);
          fbb.addInt64(12, object.apiId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final apiIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final userIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final likesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final dislikesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final viewsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final isDeletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final object = PostEntity(
              id: idParam,
              apiId: apiIdParam,
              title: titleParam,
              body: bodyParam,
              userId: userIdParam,
              tags: tagsParam,
              likes: likesParam,
              dislikes: dislikesParam,
              views: viewsParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              isSynced: isSyncedParam,
              isDeleted: isDeletedParam);

          return object;
        }),
    TodoEntity: obx_int.EntityDefinition<TodoEntity>(
        model: _entities[1],
        toOneRelations: (TodoEntity object) => [],
        toManyRelations: (TodoEntity object) => {},
        getId: (TodoEntity object) => object.id,
        setId: (TodoEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TodoEntity object, fb.Builder fbb) {
          final todoOffset = fbb.writeString(object.todo);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, todoOffset);
          fbb.addBool(2, object.completed);
          fbb.addInt64(3, object.userId);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.addBool(6, object.isSynced);
          fbb.addBool(7, object.isDeleted);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final todoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final completedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final userIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final isDeletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = TodoEntity(
              id: idParam,
              todo: todoParam,
              completed: completedParam,
              userId: userIdParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              isSynced: isSyncedParam,
              isDeleted: isDeletedParam);

          return object;
        }),
    UserEntity: obx_int.EntityDefinition<UserEntity>(
        model: _entities[2],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final usernameOffset = fbb.writeString(object.username);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset = fbb.writeString(object.phone);
          final imageOffset = fbb.writeString(object.image);
          final genderOffset = fbb.writeString(object.gender);
          final birthDateOffset = object.birthDate == null
              ? null
              : fbb.writeString(object.birthDate!);
          final addressStreetOffset = object.addressStreet == null
              ? null
              : fbb.writeString(object.addressStreet!);
          final addressCityOffset = object.addressCity == null
              ? null
              : fbb.writeString(object.addressCity!);
          final addressStateOffset = object.addressState == null
              ? null
              : fbb.writeString(object.addressState!);
          final addressStateCodeOffset = object.addressStateCode == null
              ? null
              : fbb.writeString(object.addressStateCode!);
          final addressPostalCodeOffset = object.addressPostalCode == null
              ? null
              : fbb.writeString(object.addressPostalCode!);
          final addressCountryOffset = object.addressCountry == null
              ? null
              : fbb.writeString(object.addressCountry!);
          final companyNameOffset = object.companyName == null
              ? null
              : fbb.writeString(object.companyName!);
          final companyDepartmentOffset = object.companyDepartment == null
              ? null
              : fbb.writeString(object.companyDepartment!);
          final companyTitleOffset = object.companyTitle == null
              ? null
              : fbb.writeString(object.companyTitle!);
          fbb.startTable(25);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.apiId);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.addOffset(4, usernameOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, phoneOffset);
          fbb.addOffset(7, imageOffset);
          fbb.addOffset(8, genderOffset);
          fbb.addOffset(9, birthDateOffset);
          fbb.addOffset(10, addressStreetOffset);
          fbb.addOffset(11, addressCityOffset);
          fbb.addOffset(12, addressStateOffset);
          fbb.addOffset(13, addressStateCodeOffset);
          fbb.addOffset(14, addressPostalCodeOffset);
          fbb.addOffset(15, addressCountryOffset);
          fbb.addOffset(16, companyNameOffset);
          fbb.addOffset(17, companyDepartmentOffset);
          fbb.addOffset(18, companyTitleOffset);
          fbb.addInt64(19, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(20, object.updatedAt.millisecondsSinceEpoch);
          fbb.addBool(21, object.isSynced);
          fbb.addBool(22, object.isDeleted);
          fbb.addBool(23, object.isInitialBatch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final apiIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final birthDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final addressStreetParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final addressCityParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final addressStateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final addressStateCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final addressPostalCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32);
          final addressCountryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34);
          final companyNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final companyDepartmentParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 38);
          final companyTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0));
          final isSyncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 46, false);
          final isDeletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 48, false);
          final isInitialBatchParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 50, false);
          final object = UserEntity(
              id: idParam,
              apiId: apiIdParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              username: usernameParam,
              email: emailParam,
              phone: phoneParam,
              image: imageParam,
              gender: genderParam,
              birthDate: birthDateParam,
              addressStreet: addressStreetParam,
              addressCity: addressCityParam,
              addressState: addressStateParam,
              addressStateCode: addressStateCodeParam,
              addressPostalCode: addressPostalCodeParam,
              addressCountry: addressCountryParam,
              companyName: companyNameParam,
              companyDepartment: companyDepartmentParam,
              companyTitle: companyTitleParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              isSynced: isSyncedParam,
              isDeleted: isDeletedParam,
              isInitialBatch: isInitialBatchParam);

          return object;
        }),
    MyPostEntity: obx_int.EntityDefinition<MyPostEntity>(
        model: _entities[3],
        toOneRelations: (MyPostEntity object) => [],
        toManyRelations: (MyPostEntity object) => {},
        getId: (MyPostEntity object) => object.id,
        setId: (MyPostEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MyPostEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final bodyOffset = fbb.writeString(object.body);
          final authorNameOffset = fbb.writeString(object.authorName);
          final tagsOffset = fbb.writeList(
              object.tags.map(fbb.writeString).toList(growable: false));
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, bodyOffset);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
          fbb.addBool(6, object.isDeleted);
          fbb.addOffset(7, authorNameOffset);
          fbb.addOffset(8, tagsOffset);
          fbb.addInt64(9, object.likes);
          fbb.addInt64(10, object.dislikes);
          fbb.addInt64(11, object.views);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final authorNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final tagsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 20, []);
          final likesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final dislikesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final viewsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final isDeletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final object = MyPostEntity(
              id: idParam,
              title: titleParam,
              body: bodyParam,
              authorName: authorNameParam,
              tags: tagsParam,
              likes: likesParam,
              dislikes: dislikesParam,
              views: viewsParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              isDeleted: isDeletedParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [PostEntity] entity fields to define ObjectBox queries.
class PostEntity_ {
  /// See [PostEntity.id].
  static final id =
      obx.QueryIntegerProperty<PostEntity>(_entities[0].properties[0]);

  /// See [PostEntity.title].
  static final title =
      obx.QueryStringProperty<PostEntity>(_entities[0].properties[1]);

  /// See [PostEntity.body].
  static final body =
      obx.QueryStringProperty<PostEntity>(_entities[0].properties[2]);

  /// See [PostEntity.userId].
  static final userId =
      obx.QueryIntegerProperty<PostEntity>(_entities[0].properties[3]);

  /// See [PostEntity.tags].
  static final tags =
      obx.QueryStringProperty<PostEntity>(_entities[0].properties[4]);

  /// See [PostEntity.likes].
  static final likes =
      obx.QueryIntegerProperty<PostEntity>(_entities[0].properties[5]);

  /// See [PostEntity.dislikes].
  static final dislikes =
      obx.QueryIntegerProperty<PostEntity>(_entities[0].properties[6]);

  /// See [PostEntity.views].
  static final views =
      obx.QueryIntegerProperty<PostEntity>(_entities[0].properties[7]);

  /// See [PostEntity.createdAt].
  static final createdAt =
      obx.QueryDateProperty<PostEntity>(_entities[0].properties[8]);

  /// See [PostEntity.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<PostEntity>(_entities[0].properties[9]);

  /// See [PostEntity.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<PostEntity>(_entities[0].properties[10]);

  /// See [PostEntity.isDeleted].
  static final isDeleted =
      obx.QueryBooleanProperty<PostEntity>(_entities[0].properties[11]);

  /// See [PostEntity.apiId].
  static final apiId =
      obx.QueryIntegerProperty<PostEntity>(_entities[0].properties[12]);
}

/// [TodoEntity] entity fields to define ObjectBox queries.
class TodoEntity_ {
  /// See [TodoEntity.id].
  static final id =
      obx.QueryIntegerProperty<TodoEntity>(_entities[1].properties[0]);

  /// See [TodoEntity.todo].
  static final todo =
      obx.QueryStringProperty<TodoEntity>(_entities[1].properties[1]);

  /// See [TodoEntity.completed].
  static final completed =
      obx.QueryBooleanProperty<TodoEntity>(_entities[1].properties[2]);

  /// See [TodoEntity.userId].
  static final userId =
      obx.QueryIntegerProperty<TodoEntity>(_entities[1].properties[3]);

  /// See [TodoEntity.createdAt].
  static final createdAt =
      obx.QueryDateProperty<TodoEntity>(_entities[1].properties[4]);

  /// See [TodoEntity.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<TodoEntity>(_entities[1].properties[5]);

  /// See [TodoEntity.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<TodoEntity>(_entities[1].properties[6]);

  /// See [TodoEntity.isDeleted].
  static final isDeleted =
      obx.QueryBooleanProperty<TodoEntity>(_entities[1].properties[7]);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// See [UserEntity.id].
  static final id =
      obx.QueryIntegerProperty<UserEntity>(_entities[2].properties[0]);

  /// See [UserEntity.apiId].
  static final apiId =
      obx.QueryIntegerProperty<UserEntity>(_entities[2].properties[1]);

  /// See [UserEntity.firstName].
  static final firstName =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[2]);

  /// See [UserEntity.lastName].
  static final lastName =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[3]);

  /// See [UserEntity.username].
  static final username =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[4]);

  /// See [UserEntity.email].
  static final email =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[5]);

  /// See [UserEntity.phone].
  static final phone =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[6]);

  /// See [UserEntity.image].
  static final image =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[7]);

  /// See [UserEntity.gender].
  static final gender =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[8]);

  /// See [UserEntity.birthDate].
  static final birthDate =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[9]);

  /// See [UserEntity.addressStreet].
  static final addressStreet =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[10]);

  /// See [UserEntity.addressCity].
  static final addressCity =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[11]);

  /// See [UserEntity.addressState].
  static final addressState =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[12]);

  /// See [UserEntity.addressStateCode].
  static final addressStateCode =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[13]);

  /// See [UserEntity.addressPostalCode].
  static final addressPostalCode =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[14]);

  /// See [UserEntity.addressCountry].
  static final addressCountry =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[15]);

  /// See [UserEntity.companyName].
  static final companyName =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[16]);

  /// See [UserEntity.companyDepartment].
  static final companyDepartment =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[17]);

  /// See [UserEntity.companyTitle].
  static final companyTitle =
      obx.QueryStringProperty<UserEntity>(_entities[2].properties[18]);

  /// See [UserEntity.createdAt].
  static final createdAt =
      obx.QueryDateProperty<UserEntity>(_entities[2].properties[19]);

  /// See [UserEntity.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<UserEntity>(_entities[2].properties[20]);

  /// See [UserEntity.isSynced].
  static final isSynced =
      obx.QueryBooleanProperty<UserEntity>(_entities[2].properties[21]);

  /// See [UserEntity.isDeleted].
  static final isDeleted =
      obx.QueryBooleanProperty<UserEntity>(_entities[2].properties[22]);

  /// See [UserEntity.isInitialBatch].
  static final isInitialBatch =
      obx.QueryBooleanProperty<UserEntity>(_entities[2].properties[23]);
}

/// [MyPostEntity] entity fields to define ObjectBox queries.
class MyPostEntity_ {
  /// See [MyPostEntity.id].
  static final id =
      obx.QueryIntegerProperty<MyPostEntity>(_entities[3].properties[0]);

  /// See [MyPostEntity.title].
  static final title =
      obx.QueryStringProperty<MyPostEntity>(_entities[3].properties[1]);

  /// See [MyPostEntity.body].
  static final body =
      obx.QueryStringProperty<MyPostEntity>(_entities[3].properties[2]);

  /// See [MyPostEntity.createdAt].
  static final createdAt =
      obx.QueryDateProperty<MyPostEntity>(_entities[3].properties[3]);

  /// See [MyPostEntity.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<MyPostEntity>(_entities[3].properties[4]);

  /// See [MyPostEntity.isDeleted].
  static final isDeleted =
      obx.QueryBooleanProperty<MyPostEntity>(_entities[3].properties[5]);

  /// See [MyPostEntity.authorName].
  static final authorName =
      obx.QueryStringProperty<MyPostEntity>(_entities[3].properties[6]);

  /// See [MyPostEntity.tags].
  static final tags =
      obx.QueryStringVectorProperty<MyPostEntity>(_entities[3].properties[7]);

  /// See [MyPostEntity.likes].
  static final likes =
      obx.QueryIntegerProperty<MyPostEntity>(_entities[3].properties[8]);

  /// See [MyPostEntity.dislikes].
  static final dislikes =
      obx.QueryIntegerProperty<MyPostEntity>(_entities[3].properties[9]);

  /// See [MyPostEntity.views].
  static final views =
      obx.QueryIntegerProperty<MyPostEntity>(_entities[3].properties[10]);
}
